import NextAuth, { NextAuthOptions } from "next-auth";import GoogleProvider from "next-auth/providers/google";
const scopes=[ "openid","email","profile","https://www.googleapis.com/auth/analytics.readonly","https://www.googleapis.com/auth/webmasters.readonly","https://www.googleapis.com/auth/business.manage","https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive.file"].join(" ");
async function refreshAccessToken(token:any){try{if(!token.refresh_token) return token;const params=new URLSearchParams({client_id:process.env.GOOGLE_CLIENT_ID||"",client_secret:process.env.GOOGLE_CLIENT_SECRET||"",grant_type:"refresh_token",refresh_token:token.refresh_token as string});const r=await fetch("https://oauth2.googleapis.com/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:params.toString()});const j=await r.json();if(!r.ok) throw j;return{...token,access_token:j.access_token,expires_at:Date.now()+j.expires_in*1000,refresh_token:j.refresh_token??token.refresh_token};}catch{return{...token,error:"RefreshAccessTokenError"};}}
export const authOptions: NextAuthOptions = { providers:[ GoogleProvider({ clientId:process.env.GOOGLE_CLIENT_ID||"", clientSecret:process.env.GOOGLE_CLIENT_SECRET||"", authorization:{ params:{ scope:scopes, access_type:"offline", prompt:"consent"} } })], session:{strategy:"jwt"}, callbacks:{ async jwt({token,account}){ if(account?.provider==="google"){ token.access_token=account.access_token; token.refresh_token=account.refresh_token; token.expires_at=(account.expires_at??0)*1000; } if(token.expires_at && Date.now() < (token.expires_at as number) - 60000) return token; return await refreshAccessToken(token); }, async session({session,token}){ (session as any).access_token=token.access_token; (session as any).expires_at=token.expires_at; (session as any).error=(token as any).error; return session; } }, secret: process.env.NEXTAUTH_SECRET };
export default NextAuth(authOptions);