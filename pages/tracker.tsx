import Nav from "../components/Nav";import GSCSitePicker from "../components/GSCSitePicker";import { useEffect,useState } from "react";import { toCSV } from "../lib/util";
export default function Tracker(){const[siteUrl,setSiteUrl]=useState<string>("");const[keywords,setKeywords]=useState<string>("");const[location,setLocation]=useState<string>("");const[days,setDays]=useState<number>(1);const[topN,setTopN]=useState<number>(10);const[running,setRunning]=useState(false);const[log,setLog]=useState<string>("");const[rows,setRows]=useState<any[]>([]);const[headers,setHeaders]=useState<string[]>([]);
const recent=async()=>{try{const r=await fetch("/api/tracker/recent");const j=await r.json();if(r.ok){setRows(j.rows||[]);setHeaders(j.headers||[]);}}catch{}};useEffect(()=>{recent();},[]);
const run=async()=>{setRunning(true);setLog("");try{const r=await fetch("/api/tracker/run",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({siteUrl,keywords:keywords.split(',').map(s=>s.trim()).filter(Boolean),location,days,topN})});const j=await r.json();if(!r.ok) throw new Error(j.error||"Failed");setLog(j.message||"Done");await recent();}catch(e:any){setLog(e.message);}finally{setRunning(false);}};
const downloadCSV=()=>{const csv=toCSV(rows,headers);const blob=new Blob([csv],{type:"text/csv;charset=utf-8"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download="tracker_recent.csv";a.click();URL.revokeObjectURL(url);};
return(<main><Nav/><div className="max-w-5xl mx-auto p-6 space-y-4"><h1 className="text-xl font-bold">Organic Tracker</h1><p className="text-sm text-gray-600">Top-N query+page pairs by average position. Optional SERP snapshot with location.</p>
<div className="grid md:grid-cols-2 gap-4"><div><label className="text-sm font-medium">GSC Site</label><GSCSitePicker value={siteUrl} onChange={setSiteUrl}/></div><div><label className="text-sm font-medium">Keywords (optional)</label><input className="w-full border rounded p-2" placeholder="comma-separated" value={keywords} onChange={e=>setKeywords(e.target.value)}/></div><div><label className="text-sm font-medium">Location for SERP (optional)</label><input className="w-full border rounded p-2" placeholder="e.g., Dallas, US-TX" value={location} onChange={e=>setLocation(e.target.value)}/></div><div className="grid grid-cols-2 gap-2"><div><label className="text-sm font-medium">Days</label><input type="number" min={1} max={28} className="w-full border rounded p-2" value={days} onChange={e=>setDays(parseInt(e.target.value||"1"))}/></div><div><label className="text-sm font-medium">Top N</label><input type="number" min={1} max={20} className="w-full border rounded p-2" value={topN} onChange={e=>setTopN(parseInt(e.target.value||"10"))}/></div></div></div>
<div className="p-4 border rounded-lg space-y-3"><button className="px-4 py-2 rounded bg-black text-white disabled:opacity-50" onClick={run} disabled={running||!siteUrl}>{running?"Runningâ€¦":"Run Now"}</button><button className="px-4 py-2 rounded bg-gray-200 disabled:opacity-50" onClick={downloadCSV} disabled={!rows.length}>Download recent CSV</button><pre className="text-xs bg-gray-50 p-3 rounded whitespace-pre-wrap">{log}</pre></div>
<div className="p-4 border rounded-lg overflow-auto"><table className="text-xs w-full"><thead><tr>{headers.map(h=><th key={h} className="text-left p-2 border-b">{h}</th>)}</tr></thead><tbody>{rows.map((r,i)=>(<tr key={i} className="border-b">{headers.map(h=><td key={h} className="p-2">{String((r as any)[h]??"")}</td>)}</tr>))}</tbody></table></div>
</div></main>);}