import Nav from "../components/Nav";import GAPropertyPicker from "../components/GAPropertyPicker";import GSCSitePicker from "../components/GSCSitePicker";import { useEffect,useState } from "react";import { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, Tooltip, Legend } from "recharts";
function rangeFor(period:string){const e=new Date();const s=new Date();const n=period==="7d"?7:period==="90d"?90:28;s.setDate(e.getDate()-(n-1));const iso=(d:Date)=>d.toISOString().slice(0,10);return{startDate:iso(s),endDate:iso(e)};}
export default function Dashboard(){const[propertyId,setPropertyId]=useState<string>("");const[siteUrl,setSiteUrl]=useState<string>("");const[period,setPeriod]=useState<"7d"|"28d"|"90d">("28d");const[series,setSeries]=useState<any[]>([]);const[error,setError]=useState<string|null>(null);const[loading,setLoading]=useState(false);
const load=async()=>{if(!propertyId||!siteUrl) return; setLoading(true); setError(null); const {startDate,endDate}=rangeFor(period); try{const r=await fetch(`/api/aggregations/default?propertyId=${encodeURIComponent(propertyId)}&siteUrl=${encodeURIComponent(siteUrl)}&startDate=${startDate}&endDate=${endDate}`); const j=await r.json(); if(!r.ok) throw new Error(j.error||"Failed"); setSeries(j.series||[]);}catch(e:any){setError(e.message);}finally{setLoading(false);}};
useEffect(()=>{load();},[propertyId,siteUrl,period]);
return(<main><Nav/><div className="max-w-7xl mx-auto p-6 space-y-6"><h1 className="text-xl font-bold">Default Dashboard</h1><p className="text-sm text-gray-600">Pick your GA4 property and GSC site. Compare Sessions, Clicks, CTR, Position.</p>
<div className="grid md:grid-cols-3 gap-4"><div><label className="text-sm font-medium">GA4 Property</label><GAPropertyPicker value={propertyId} onChange={setPropertyId}/></div><div><label className="text-sm font-medium">GSC Site</label><GSCSitePicker value={siteUrl} onChange={setSiteUrl}/></div><div><label className="text-sm font-medium">Date range</label><select className="w-full border rounded p-2" value={period} onChange={e=>setPeriod(e.target.value as any)}><option value="7d">Last 7 days</option><option value="28d">Last 28 days</option><option value="90d">Last 90 days</option></select></div></div>
{error&&<p className="text-red-600">{error}</p>}
<div className="p-4 border rounded-lg space-y-4"><h3 className="font-medium">Sessions (GA4) vs Clicks/CTR/Position (GSC)</h3>
<div className="w-full h-72"><ResponsiveContainer><AreaChart data={series}><XAxis dataKey="date" tick={{fontSize:11}}/><YAxis/><Tooltip/><Legend/><Area dataKey="sessions" type="monotone" fillOpacity={0.25}/><Area dataKey="clicks" type="monotone" fillOpacity={0.2}/></AreaChart></ResponsiveContainer></div>
<div className="w-full h-72"><ResponsiveContainer><AreaChart data={series}><XAxis dataKey="date" tick={{fontSize:11}}/><YAxis/><Tooltip/><Legend/><Area dataKey="ctr" type="monotone" fillOpacity={0.25}/><Area dataKey="position" type="monotone" fillOpacity={0.2}/></AreaChart></ResponsiveContainer></div>
</div></div></main>);}